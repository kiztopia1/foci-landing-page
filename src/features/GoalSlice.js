import { createSlice } from "@reduxjs/toolkit";

const initialState = { goals: [], future: [], id: null };

export const goalSlice = createSlice({
  name: "goals",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addGoal: (state, action) => {
      state.goals.push(action.payload);
    },
    updateGoal: (state, action) => {
      let index = action.payload.index;
      let updated = action.payload.updated;

      state.goals[index] = updated;
    },
    updateFuture: (state, action) => {
      state.future = action.payload;
    },
    addFuture: (state, action) => {
      state.future[action.payload.index - 1] = action.payload.data;
    },
    // updateFuture: (state, action) => {
    //   let index = action.payload.index;
    //   let updated = action.payload.updated;

    //   state.future[index] = updated;
    // },
    setId: (state, action) => {
      state.id = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { addGoal, updateGoal, updateFuture, addFuture, setId } =
  goalSlice.actions;

export const selectGoals = (state) => state.goals;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default goalSlice.reducer;
